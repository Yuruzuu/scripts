local httpService = game:GetService('HttpService')

local pastebinModule = {}
pastebinModule.userDetails = nil
pastebinModule.devKey = 'mlvbGbgFRyd_AI3EoMv5euWu-pTXZOcX' --paste your dev key here which you can find at https://pastebin.com/doc_api

local userKey -- be careful with this variable
local mainUrl = 'https://pastebin.com/'
local apiPage = 'api/api_'
local rawPage = 'raw/'

local function encodeParamsUrl(data)
	local s = 'api_dev_key='..httpService:UrlEncode(pastebinModule.devKey)
	for i, v in data do
		if v then
			s..= '&api_'..i..'='..httpService:UrlEncode(v)
		end
	end 
	return s
end

local function httpPost(dir: string, data: {[string]:string})
	local success, value = pcall(function()
		local url, encodedData = mainUrl..apiPage..dir..'.php', encodeParamsUrl(data)
		print(url, encodedData)
		return httpService:PostAsync(url, encodedData, Enum.HttpContentType.ApplicationUrlEncoded)
	end)
	if success then
		return value
	else
		warn(value)
	end
end

local function httpRawGet(dir)
	local success, value = pcall(function()
		local url = mainUrl..rawPage..dir
		return httpService:GetAsync(url, false)
	end)
	if success then
		return value
	else
		warn(value)
	end
end

local function decodeUserDetails(cssString: string)
	local userDetails = {}
	for _, str in cssString:gsub('<user>', ''):gsub('%s', ''):gsub('</[^>]+>', ''):split('<') do
		local i = str:gsub('<', ''):split('>')[1]:gsub('user_', '')
		if not i:find('avatar') then
			userDetails[i] = str:gsub('<[^>]+>', ''):split('>')[2]
		end
	end
	userDetails.username = userDetails.name
	userDetails.name = nil
	return userDetails
end

local function decodePasteList(pasteListString: string)
	local pasteList = {}
	for _, paste in pasteListString:split('<paste>') do
		local pasteData = {}
		for _, str in paste:gsub('%s', ''):gsub('</[^>]+>', ''):split('<') do
			local i = str:gsub('<', ''):split('>')[1]:gsub('user_', '')
			if not i:find('avatar') then
				pasteData[i] = str:gsub('<[^>]+>', ''):split('>')[2]
			end
		end
		if pasteData.paste_key then
			pasteList[pasteData.paste_key] = pasteData
		end
	end
	return pasteList
end

function pastebinModule:createPaste(guest: boolean, content: string, name: string, lifetime: string, format: string, privacy: number)
	return httpPost('post', {option='paste', user_key = (not guest and userKey),  paste_code=content, paste_name=name, paste_expire_date=lifetime, paste_format=format, paste_private = privacy})
end

function pastebinModule:deletePaste(pasteCode: string)
	if userKey then
		return httpPost('post', {option='delete', user_key = userKey, paste_key = pasteCode})
	end
end

function pastebinModule:fetchPaste(pasteCode: string, raw: boolean)
	if userKey and not raw then
		return httpPost('raw', {option='show_paste', user_key=userKey, paste_key=pasteCode})
	else
		return httpRawGet(pasteCode)
	end
end

function pastebinModule:listUserPastes(listLen: number)
	if userKey then
		local pasteList = httpPost('post', {option='list', user_key=userKey, results_limit=listLen})
		if pasteList then
			return decodePasteList(pasteList)
		end
	end
end

function pastebinModule:userLogin(username: string, password: string)
	local promptKey = httpPost('login', {user_name=username, user_password=password})
	if promptKey then
		local promptDetails = httpPost('post', {user_key=promptKey, option='userdetails'})
		if promptDetails then
			userKey = promptKey
			local userDetails = decodeUserDetails(promptDetails)
			self.userDetails = userDetails
			print('Successfully logged in as '..userDetails.username..' at '..mainUrl)
			return true
		end
	end
end

function pastebinModule:userLogout()
	userKey=nil
	self.userDetails=nil
	print('Successfully logged out of '..mainUrl)
end

return pastebinModule
